{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\siluk\\\\OneDrive\\\\Desktop\\\\Assignments\\\\Google-book-react-search\\\\client\\\\src\\\\components\\\\Result.js\";\nimport React from 'react';\nimport { saveBooksDB, deleteBooksDB, getBooksDB } from '../utils/API';\nimport { Button } from 'react-bootstrap';\nimport './Result.css';\nexport default function Result(props) {\n  var tempArray = [];\n\n  const handleSaveOrDelete = e => {\n    const myBook = JSON.parse(e.target.value);\n\n    if (myBook.onlineId) {\n      deleteBooksDB(myBook.onlineId).then(res => {\n        getBooksDB().then(res => props.setBooks(res.data));\n      });\n    } else {\n      const data = {\n        onlineId: myBook.id,\n        volumeInfo: {\n          title: myBook.volumeInfo.title,\n          description: myBook.volumeInfo.description || \"Not Description\",\n          canonicalVolumeLink: myBook.volumeInfo.canonicalVolumeLink,\n          imageLinks: {\n            smallThumbnail: myBook.volumeInfo.imageLinks.smallThumbnail\n          }\n        }\n      };\n      saveBooksDB(data).then(res => {\n        props.books.map(book => {\n          if (book.id === data.onlineId) {\n            tempArray.push(data);\n          } else {\n            tempArray.push(book);\n          }\n        });\n        props.setBooks(tempArray);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: props.books && props.books.map(book => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: book.volumeInfo.imageLinks.smallThumbnail,\n          alt: \"book\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          \"data-id\": book.onlineId,\n          value: JSON.stringify(book),\n          onClick: handleSaveOrDelete,\n          children: book.onlineId ? \"Delete Book\" : \"Save Book\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => window.location = book.volumeInfo.canonicalVolumeLink,\n          children: \"View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            textAlign: 'left'\n          },\n          children: book.volumeInfo.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: 'left'\n          },\n          children: book.volumeInfo.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_c = Result;\n\nvar _c;\n\n$RefreshReg$(_c, \"Result\");","map":{"version":3,"sources":["C:/Users/siluk/OneDrive/Desktop/Assignments/Google-book-react-search/client/src/components/Result.js"],"names":["React","saveBooksDB","deleteBooksDB","getBooksDB","Button","Result","props","tempArray","handleSaveOrDelete","e","myBook","JSON","parse","target","value","onlineId","then","res","setBooks","data","id","volumeInfo","title","description","canonicalVolumeLink","imageLinks","smallThumbnail","books","map","book","push","stringify","window","location","textAlign"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { saveBooksDB, deleteBooksDB, getBooksDB } from '../utils/API';\r\nimport { Button } from 'react-bootstrap';\r\nimport './Result.css';\r\n\r\nexport default function Result(props) {\r\n    var tempArray = []\r\n    const handleSaveOrDelete = (e) => {\r\n        const myBook = JSON.parse(e.target.value)\r\n        if (myBook.onlineId) {\r\n            deleteBooksDB(myBook.onlineId)\r\n                .then(res => {\r\n                    getBooksDB()\r\n                        .then(res => props.setBooks(res.data))\r\n                }\r\n                )\r\n        }\r\n        else {\r\n            const data = {\r\n                onlineId: myBook.id,\r\n                volumeInfo: {\r\n                    title: myBook.volumeInfo.title,\r\n                    description: myBook.volumeInfo.description || \"Not Description\",\r\n                    canonicalVolumeLink: myBook.volumeInfo.canonicalVolumeLink,\r\n                    imageLinks: {\r\n                        smallThumbnail: myBook.volumeInfo.imageLinks.smallThumbnail,\r\n                    }\r\n                }\r\n            }\r\n            saveBooksDB(data)\r\n                .then(res => {\r\n                    props.books.map((book) => {\r\n                        if (book.id === data.onlineId) {\r\n                            tempArray.push(data)\r\n                        }\r\n                        else {\r\n                            tempArray.push(book)\r\n                        }\r\n                    })\r\n                    props.setBooks(tempArray)\r\n                })\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            {props.books && props.books.map((book) => (\r\n                <div className=\"result\">\r\n                    <div className=\"image-group\">\r\n                        <img src={book.volumeInfo.imageLinks.smallThumbnail} alt=\"book\"></img>\r\n                        <Button variant=\"primary\" data-id={book.onlineId} value={JSON.stringify(book)} onClick={handleSaveOrDelete}>{book.onlineId ? \"Delete Book\" : \"Save Book\"}</Button>\r\n                        <Button variant=\"secondary\" onClick={() => window.location = book.volumeInfo.canonicalVolumeLink}>View</Button>\r\n                    </div>\r\n                    <div className=\"text-group\">\r\n                        <h3 style={{ textAlign: 'left' }}>{book.volumeInfo.title}</h3>\r\n                        <p style={{ textAlign: 'left' }}>{book.volumeInfo.description}</p>\r\n                    </div>\r\n\r\n                </div>\r\n            ))}\r\n        </div>\r\n\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}